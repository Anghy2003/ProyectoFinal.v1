
package Vista.Catálogo;

import Conexion.Conexion_db;
import Models.CategoriaServicio;


import Models.Servicios;
import static Vista.Catálogo.CrudCategoria.guardarCategoria;


import Vista.Menu.VistaMenu;
import Vista.Tables.TablaCategoriaSer;

import Vista.Tables.TablaServicios;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.ext.InvalidIDException;
import com.db4o.query.Query;
import java.awt.BorderLayout;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JDialog;
import javax.swing.JFileChooser;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.filechooser.FileNameExtensionFilter;

public class BuscarServicios extends javax.swing.JPanel {

    /**
     * Creates new form CrudPanelServicios
     */
     private byte[] imagenServicio;
    private String BuscarCodigo;
    public BuscarServicios(String receivedString) {
        initComponents();
        this.BuscarCodigo = receivedString;
         mostrarCombo();
        buscarServicio();
                txtCodigo.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        txtCodigo = new rojeru_san.RSMTextFull();
        jLabel4 = new javax.swing.JLabel();
        txtNombres = new rojeru_san.RSMTextFull();
        btnCancelar = new rojeru_san.RSButtonRiple();
        btnModificar = new rojeru_san.RSButtonRiple();
        lblCodigooProducto = new javax.swing.JLabel();
        lblPrecioProducto = new javax.swing.JLabel();
        lblCodigoocategoria = new javax.swing.JLabel();
        lblDescripcion = new javax.swing.JLabel();
        txtDescripcion = new rojeru_san.RSMTextFull();
        txtPrecio = new rojeru_san.RSMTextFull();
        btnSeleccionarImgen = new rojeru_san.RSButtonRiple();
        lblImagen = new javax.swing.JLabel();
        CmbCategoria = new javax.swing.JComboBox<>();
        lblCodigoocategoria1 = new javax.swing.JLabel();
        CmbDuracion = new javax.swing.JComboBox<>();
        rSButtonGradiente1 = new rsbuttongradiente.RSButtonGradiente();

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setFocusTraversalPolicyProvider(true);
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Roboto Black", 0, 30)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(0, 53, 79));
        jLabel2.setText("Modificación De Servicios");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 10, 390, 40));

        txtCodigo.setForeground(new java.awt.Color(0, 53, 79));
        txtCodigo.setColorTransparente(true);
        txtCodigo.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        txtCodigo.setPlaceholder("Código");
        txtCodigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtCodigoActionPerformed(evt);
            }
        });
        jPanel1.add(txtCodigo, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 50, 180, 40));

        jLabel4.setFont(new java.awt.Font("Roboto Medium", 1, 18)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 53, 79));
        jLabel4.setText("Nombre:");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 110, 100, 40));

        txtNombres.setForeground(new java.awt.Color(0, 53, 79));
        txtNombres.setColorTransparente(true);
        txtNombres.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        txtNombres.setPlaceholder("Escriba el nombre");
        jPanel1.add(txtNombres, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 110, 180, 40));

        btnCancelar.setBackground(new java.awt.Color(255, 51, 51));
        btnCancelar.setText("Cancelar");
        btnCancelar.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCancelarMouseClicked(evt);
            }
        });
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 420, -1, -1));

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });
        jPanel1.add(btnModificar, new org.netbeans.lib.awtextra.AbsoluteConstraints(370, 440, -1, -1));

        lblCodigooProducto.setFont(new java.awt.Font("Roboto Medium", 1, 18)); // NOI18N
        lblCodigooProducto.setForeground(new java.awt.Color(0, 53, 79));
        lblCodigooProducto.setText("Código:");
        jPanel1.add(lblCodigooProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 70, -1, -1));

        lblPrecioProducto.setFont(new java.awt.Font("Roboto Medium", 1, 18)); // NOI18N
        lblPrecioProducto.setForeground(new java.awt.Color(0, 53, 79));
        lblPrecioProducto.setText("Precio Total:");
        jPanel1.add(lblPrecioProducto, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 330, -1, -1));

        lblCodigoocategoria.setFont(new java.awt.Font("Roboto Medium", 1, 18)); // NOI18N
        lblCodigoocategoria.setForeground(new java.awt.Color(0, 53, 79));
        lblCodigoocategoria.setText("Categoria:");
        jPanel1.add(lblCodigoocategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 280, -1, -1));

        lblDescripcion.setFont(new java.awt.Font("Roboto Medium", 1, 18)); // NOI18N
        lblDescripcion.setForeground(new java.awt.Color(0, 53, 79));
        lblDescripcion.setText("Descripción:");
        jPanel1.add(lblDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 180, 120, -1));

        txtDescripcion.setForeground(new java.awt.Color(0, 53, 79));
        txtDescripcion.setColorTransparente(true);
        txtDescripcion.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        txtDescripcion.setPlaceholder("Descripción");
        txtDescripcion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDescripcionActionPerformed(evt);
            }
        });
        jPanel1.add(txtDescripcion, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 170, 180, 40));

        txtPrecio.setForeground(new java.awt.Color(0, 53, 79));
        txtPrecio.setColorTransparente(true);
        txtPrecio.setFont(new java.awt.Font("Roboto Light", 1, 14)); // NOI18N
        txtPrecio.setPlaceholder("Escriba el precio");
        txtPrecio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPrecioActionPerformed(evt);
            }
        });
        jPanel1.add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(200, 310, 200, 40));

        btnSeleccionarImgen.setText("Selecionar Imagen");
        btnSeleccionarImgen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSeleccionarImgenActionPerformed(evt);
            }
        });
        jPanel1.add(btnSeleccionarImgen, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 230, 180, -1));

        lblImagen.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel1.add(lblImagen, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 80, 180, 140));

        jPanel1.add(CmbCategoria, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 272, 120, 30));

        lblCodigoocategoria1.setFont(new java.awt.Font("Roboto Medium", 1, 18)); // NOI18N
        lblCodigoocategoria1.setForeground(new java.awt.Color(0, 53, 79));
        lblCodigoocategoria1.setText("Duración del servicio:");
        jPanel1.add(lblCodigoocategoria1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 230, -1, -1));

        CmbDuracion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1 Hora ", "2 Horas ", "3 Horas", "4 Horas", "5 horas" }));
        jPanel1.add(CmbDuracion, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 230, 140, 20));

        rSButtonGradiente1.setText("Añadir");
        rSButtonGradiente1.setColorPrimario(new java.awt.Color(51, 51, 255));
        rSButtonGradiente1.setColorSecundario(new java.awt.Color(0, 102, 255));
        rSButtonGradiente1.setColorSecundarioHover(new java.awt.Color(0, 102, 204));
        rSButtonGradiente1.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        rSButtonGradiente1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rSButtonGradiente1ActionPerformed(evt);
            }
        });
        jPanel1.add(rSButtonGradiente1, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 270, 80, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 870, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 630, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents
    private void MostrarpaneCruds(JPanel p) {
        p.setSize(870, 630);
        p.setLocation(0, 0);
        VistaMenu.PanelPrincipal.removeAll();
        VistaMenu.PanelPrincipal.add(p, BorderLayout.CENTER);
        VistaMenu.PanelPrincipal.revalidate();
        VistaMenu.PanelPrincipal.repaint();
    }
 public static void modificarServicio(String codigo_Servicio, String nombre_Servicio, String descripcion_Servicio, double precioTotal_Servicio, String duracion_Servicio, byte[] imagen, Servicios.Estado estado,String Categoria) {
    // ESTABLECER CONEXION CON LA BASE DE DATOS
    ObjectContainer BaseBD = Conexion_db.ConectarBD();

    // Crear el objeto con los datos nuevos
    Servicios servicioModificado = new Servicios(codigo_Servicio, nombre_Servicio, descripcion_Servicio, precioTotal_Servicio, duracion_Servicio, imagen, estado,Categoria);

    // Buscar el objeto existente en la base de datos
    Servicios servicioBusca = new Servicios(codigo_Servicio, null, null, 0.0, null, null, null,null);
    ObjectSet resultado = BaseBD.get(servicioBusca);
    int coincidencias = resultado.size();

    if (coincidencias > 0) {
        // Eliminar el objeto existente
        Servicios servicioAEliminar = (Servicios) resultado.next();
        BaseBD.delete(servicioAEliminar);
        
        // Guardar el nuevo objeto con los datos modificados
        BaseBD.set(servicioModificado); 
       
    }

    // Cerrar la base de datos
    BaseBD.close();
}
  public static int verificarServicioGuardar(String codigo_Servicio) {
    // ESTABLECER CONEXION CON LA BASE DE DATOS
    ObjectContainer BaseBD = Conexion_db.ConectarBD();
    Servicios servicioBusca = new Servicios(codigo_Servicio, null, null, 0.0, null, null,  null,null);
    ObjectSet resultado = BaseBD.get(servicioBusca);
    int coincidencias = resultado.size();
    // Cerrar la base de datos
    BaseBD.close();
    return coincidencias;
}
 public static int verificarServicio(String codigo_Servicio) {
    // ESTABLECER CONEXION CON LA BASE DE DATOS
    ObjectContainer BaseBD = Conexion_db.ConectarBD();
    Servicios servicioBusca = new Servicios(codigo_Servicio, null, null, 0.0, null, null, null,null);
    ObjectSet resultado = BaseBD.get(servicioBusca);
    int coincidencias = resultado.size();
    // Cerrar la base de datos
    BaseBD.close();
    return coincidencias;
}

    private void rSButtonGradiente1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rSButtonGradiente1ActionPerformed
       CrudCategoriaServicio cate= new CrudCategoriaServicio();
           MostrarpaneCruds(cate);
    }//GEN-LAST:event_rSButtonGradiente1ActionPerformed

    private void btnSeleccionarImgenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSeleccionarImgenActionPerformed
        JFileChooser jFileChooser = new JFileChooser();
        FileNameExtensionFilter filtrado = new FileNameExtensionFilter("JPG, PNG & GIF", "jpg", "png", "gif");
        jFileChooser.setFileFilter(filtrado);

        int respuesta = jFileChooser.showOpenDialog(this);

        if (respuesta == JFileChooser.APPROVE_OPTION) {
            File archivoImagen = jFileChooser.getSelectedFile();
            String Ruta = archivoImagen.getPath();

            try {
                imagenServicio = leerImagen(archivoImagen);

                Image mImagen = new ImageIcon(Ruta).getImage();
                ImageIcon mIcono = new ImageIcon(mImagen.getScaledInstance(lblImagen.getWidth(), lblImagen.getHeight(), Image.SCALE_SMOOTH));
                lblImagen.setIcon(mIcono);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error al leer la imagen: " + e.getMessage());
            }
        }
    }

    private byte[] leerImagen(File archivoImagen) throws IOException {
        try (ByteArrayOutputStream baos = new ByteArrayOutputStream(); FileInputStream fis = new FileInputStream(archivoImagen)) {
            byte[] buffer = new byte[1024];
            int bytesRead;
            while ((bytesRead = fis.read(buffer)) != -1) {
                baos.write(buffer, 0, bytesRead);
            }
            return baos.toByteArray();
        }
    }//GEN-LAST:event_btnSeleccionarImgenActionPerformed

    private void txtPrecioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPrecioActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtPrecioActionPerformed

    private void txtDescripcionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDescripcionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDescripcionActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        if (validarCampos()) {
            modificarServicio(
                txtCodigo.getText().toUpperCase(),
                txtNombres.getText(),
                txtDescripcion.getText(),
                Double.parseDouble(txtPrecio.getText()),
                CmbDuracion.getSelectedItem().toString(),
                imagenServicio,
                Servicios.Estado.ACTIVO,
                CmbCategoria.getSelectedItem().toString()
            );

            JOptionPane.showMessageDialog(this, "Servicio Modificado");
            resetCampos();
        }
    }

    private boolean validarCampos() {
        if (txtNombres.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese un nombre válido");
            return false;
        }
        if (txtDescripcion.getText().isEmpty()) {
            JOptionPane.showMessageDialog(this, "Ingrese una descripción válida");
            return false;
        }
        if (!txtPrecio.getText().matches("\\d+(\\.\\d{1,2})?")) {
            JOptionPane.showMessageDialog(this, "Ingrese valores numéricos válidos para el precio total");
            return false;
        }
        return true;
  
    }//GEN-LAST:event_btnModificarActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        TablaServicios tblser = new TablaServicios();
        MostrarpaneCruds(tblser);
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnCancelarMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCancelarMouseClicked
        TablaServicios tblser = new TablaServicios();
        MostrarpaneCruds(tblser);
    }//GEN-LAST:event_btnCancelarMouseClicked

    private void txtCodigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtCodigoActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtCodigoActionPerformed
 
   
private void resetCampos() {
    txtCodigo.setText("");
    txtNombres.setText("");
    txtDescripcion.setText("");
    txtPrecio.setText("");    
    lblImagen.setIcon(null);
}
private void mostrarCombo() {
    // Abrir base
    ObjectContainer BaseBD = Conexion_db.ConectarBD();
    try {
        // Consulta a la base de datos para obtener todos los objetos CategoriaServicio
        ObjectSet<CategoriaServicio> categorias = BaseBD.query(CategoriaServicio.class);
        
        // Itera sobre los resultados y agrega los nombres de categorías al JComboBox
        for (CategoriaServicio categoria : categorias) {
            CmbCategoria.addItem(categoria.getNombreCatSer());
        }
    } catch (InvalidIDException e) {
        JOptionPane.showMessageDialog(this, "Error: ID inválido en la base de datos. " + e.getMessage());
    } finally {
        // Cerrar la base de datos
        BaseBD.close();
    }
}
  private void buscarServicio() {
        Boolean encontrado = false;
        ObjectContainer BaseBD = Conexion_db.ConectarBD();
        Query servicioQuery = BaseBD.query();
        servicioQuery.constrain(Servicios.class);
        servicioQuery.descend("codigo_Servicio").constrain(BuscarCodigo.toUpperCase());
        ObjectSet<Servicios> resultado = servicioQuery.execute();

        if (resultado.hasNext()) {
            Servicios ser = resultado.next();
            txtCodigo.setText(ser.getCodigo_Servicio());
            txtNombres.setText(ser.getNombre_Servicio());
            txtDescripcion.setText(ser.getDescripcion_Servicio());
            txtPrecio.setText(String.format("%.2f", ser.getPrecioTotal_Servicio()));
            CmbDuracion.setSelectedItem(ser.getDuracion_Servicio());
            CmbCategoria.setSelectedItem(ser.getCategoria());

            byte[] imagen = ser.getImagen();
            if (imagen != null) {
                ImageIcon icono = new ImageIcon(imagen);
                int ancho = lblImagen.getWidth();
                int alto = lblImagen.getHeight();
                if (ancho > 0 && alto > 0) {
                    Image imagenEscalada = icono.getImage().getScaledInstance(ancho, alto, Image.SCALE_SMOOTH);
                    lblImagen.setIcon(new ImageIcon(imagenEscalada));
                } else {
                    Image imagenEscalada = icono.getImage().getScaledInstance(180, 140, Image.SCALE_SMOOTH);
                    lblImagen.setIcon(new ImageIcon(imagenEscalada));
                }
                this.imagenServicio = imagen; // Guardar la imagen en el campo de la clase
            }

            txtNombres.setEnabled(true);
            encontrado = true;
            JOptionPane.showMessageDialog(this, "SERVICIO ENCONTRADO");
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró el Servicio");
        }

        BaseBD.close();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CmbCategoria;
    private javax.swing.JComboBox<String> CmbDuracion;
    private rojeru_san.RSButtonRiple btnCancelar;
    private rojeru_san.RSButtonRiple btnModificar;
    private rojeru_san.RSButtonRiple btnSeleccionarImgen;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lblCodigooProducto;
    private javax.swing.JLabel lblCodigoocategoria;
    private javax.swing.JLabel lblCodigoocategoria1;
    private javax.swing.JLabel lblDescripcion;
    private javax.swing.JLabel lblImagen;
    private javax.swing.JLabel lblPrecioProducto;
    private rsbuttongradiente.RSButtonGradiente rSButtonGradiente1;
    private rojeru_san.RSMTextFull txtCodigo;
    private rojeru_san.RSMTextFull txtDescripcion;
    private rojeru_san.RSMTextFull txtNombres;
    private rojeru_san.RSMTextFull txtPrecio;
    // End of variables declaration//GEN-END:variables
}
