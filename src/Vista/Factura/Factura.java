package Vista.Factura;

import Conexion.Conexion_db;
import Models.Cliente;
import Models.DetalleFactura_1;
import Models.EncabezadoFactura_1;
import Models.Producto;
import Models.Servicios;
import Vista.Cruds.CRUDS1.CrudPanelCliente;
import Vista.Menu.VistaMenu;
import static Vista.Menu.VistaMenu.PanelPrincipal;
import com.db4o.ObjectContainer;
import com.db4o.ObjectSet;
import com.db4o.query.Query;
import com.itextpdf.io.image.ImageDataFactory;
import com.itextpdf.kernel.colors.ColorConstants;
import java.awt.BorderLayout;
import java.time.LocalDate;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import com.itextpdf.kernel.pdf.PdfWriter;
import com.itextpdf.kernel.pdf.PdfDocument;
import com.itextpdf.layout.Document;
import com.itextpdf.layout.element.Paragraph;
import com.itextpdf.layout.element.Table;
import com.itextpdf.layout.element.Cell;
import com.itextpdf.layout.element.Image;
import com.itextpdf.layout.property.TextAlignment;
import com.itextpdf.layout.property.UnitValue;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;
import javax.mail.Message;
import javax.mail.Multipart;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;

public class Factura extends javax.swing.JPanel {

    private String pdfPath = "factura.pdf";

    /**
     * Creates new form Factura
     */
    public Factura() {

        initComponents();

        setearcabe();
        txtNombre1.setEnabled(false);
        txtdireccion.setEnabled(false);
        txtcedula.setEnabled(false);
        txttelefono.setEnabled(false);
        mostrarTablaProductos();
        mostrarDatosCliente();
        mostrarTablaServicios();
        txtSubtotal.setEnabled(false);
        txtTotalfac.setEnabled(false);
        txtiva.setEnabled(false);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tablaproductos = new javax.swing.JDialog();
        jPanel6 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        tblProductos = new javax.swing.JScrollPane();
        Tablproductos1 = new javax.swing.JTable();
        txtBuscarProducto = new rojeru_san.RSMTextFull();
        jLabel3 = new javax.swing.JLabel();
        btnInsertarProductos = new rsbuttongradiente.RSButtonGradiente();
        btnbuscarproductos = new rsbuttongradiente.RSButtonGradiente();
        tablaClientes = new javax.swing.JDialog();
        jPanel7 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblClientes = new javax.swing.JTable();
        txtBuscar1 = new rojeru_san.RSMTextFull();
        btnInsertarCliente = new rsbuttongradiente.RSButtonGradiente();
        btnBuscarcliente = new rsbuttongradiente.RSButtonGradiente();
        TablaServicios = new javax.swing.JDialog();
        jPanel8 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblServicios = new javax.swing.JTable();
        txtBuscarServicio = new rojeru_san.RSMTextFull();
        jLabel6 = new javax.swing.JLabel();
        btnBuscarServicio = new rsbuttongradiente.RSButtonGradiente();
        btnInsetarServicios = new rsbuttongradiente.RSButtonGradiente();
        jPanel1 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lblTituloFac = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        lblDireccion = new javax.swing.JLabel();
        lblTelefono = new javax.swing.JLabel();
        lblDatosCli = new javax.swing.JLabel();
        txttelefono = new javax.swing.JTextField();
        lblFecha = new javax.swing.JLabel();
        txtdireccion = new javax.swing.JTextField();
        btnEliminar = new javax.swing.JButton();
        btnAñadircliente = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JtableFactura = new javax.swing.JTable();
        lblSubtotal = new javax.swing.JLabel();
        lblDescuento = new javax.swing.JLabel();
        lblIva = new javax.swing.JLabel();
        lblTotalFAc = new javax.swing.JLabel();
        btnNuevo = new javax.swing.JButton();
        btnVentasGeneradas = new javax.swing.JButton();
        btnImprimir = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        btnSalir = new javax.swing.JButton();
        lbllineas = new javax.swing.JLabel();
        lblcedula = new javax.swing.JLabel();
        txtcedula = new javax.swing.JTextField();
        lblNombre1 = new javax.swing.JLabel();
        txtNombre1 = new javax.swing.JTextField();
        txtcodigoFac = new javax.swing.JTextField();
        lblCuadro1 = new javax.swing.JLabel();
        lblcodFac1 = new javax.swing.JLabel();
        txtSubtotal = new javax.swing.JTextField();
        btnFinalizarFac = new rojeru_san.RSButton();
        btnAñadirProductos = new javax.swing.JButton();
        txtfecha = new javax.swing.JTextField();
        lblCuadro = new javax.swing.JLabel();
        btnAñadirServicos = new javax.swing.JButton();
        txtDescuento = new javax.swing.JTextField();
        txtTotalfac = new javax.swing.JTextField();
        lblverlis = new javax.swing.JLabel();
        txtiva = new javax.swing.JTextField();

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Roboto Black", 0, 22)); // NOI18N
        jLabel1.setText("Listado Productos");

        tblProductos.setBackground(new java.awt.Color(255, 255, 255));
        tblProductos.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        tblProductos.setForeground(new java.awt.Color(255, 255, 255));

        Tablproductos1.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        Tablproductos1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblProductos.setViewportView(Tablproductos1);

        txtBuscarProducto.setFont(new java.awt.Font("Roboto Bold", 2, 14)); // NOI18N
        txtBuscarProducto.setPlaceholder("ejm. Pro-01");

        jLabel3.setFont(new java.awt.Font("Roboto Black", 0, 18)); // NOI18N
        jLabel3.setText("Buscar");

        btnInsertarProductos.setBackground(new java.awt.Color(0, 204, 51));
        btnInsertarProductos.setText("Insertar");
        btnInsertarProductos.setColorPrimario(new java.awt.Color(0, 153, 51));
        btnInsertarProductos.setColorPrimarioHover(new java.awt.Color(51, 204, 0));
        btnInsertarProductos.setColorSecundario(new java.awt.Color(0, 255, 102));
        btnInsertarProductos.setColorSecundarioHover(new java.awt.Color(204, 255, 204));
        btnInsertarProductos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnInsertarProductosMouseClicked(evt);
            }
        });
        btnInsertarProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarProductosActionPerformed(evt);
            }
        });

        btnbuscarproductos.setText("Buscar");
        btnbuscarproductos.setColorPrimario(new java.awt.Color(0, 51, 153));
        btnbuscarproductos.setColorPrimarioHover(new java.awt.Color(51, 0, 255));
        btnbuscarproductos.setColorSecundario(new java.awt.Color(51, 153, 255));
        btnbuscarproductos.setColorSecundarioHover(new java.awt.Color(153, 204, 255));
        btnbuscarproductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnbuscarproductosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(tblProductos, javax.swing.GroupLayout.DEFAULT_SIZE, 836, Short.MAX_VALUE)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addGap(39, 39, 39)
                                .addComponent(txtBuscarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnbuscarproductos, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnInsertarProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel1)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(txtBuscarProducto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel3))
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnbuscarproductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnInsertarProductos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(40, 40, 40)
                .addComponent(tblProductos, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        tablaproductos.getContentPane().add(jPanel6, java.awt.BorderLayout.CENTER);

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Roboto Black", 0, 22)); // NOI18N
        jLabel4.setText("Listado Clientes");

        jScrollPane2.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane2.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane2.setEnabled(false);

        tblClientes.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tblClientes);

        txtBuscar1.setFont(new java.awt.Font("Roboto Bold", 2, 14)); // NOI18N
        txtBuscar1.setPlaceholder("ejm. 0106388747");

        btnInsertarCliente.setText("Registrar Cliente");
        btnInsertarCliente.setColorPrimario(new java.awt.Color(0, 204, 51));
        btnInsertarCliente.setColorPrimarioHover(new java.awt.Color(0, 255, 51));
        btnInsertarCliente.setColorSecundario(new java.awt.Color(0, 153, 51));
        btnInsertarCliente.setColorSecundarioHover(new java.awt.Color(51, 255, 102));
        btnInsertarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsertarClienteActionPerformed(evt);
            }
        });

        btnBuscarcliente.setText("Buscar");
        btnBuscarcliente.setColorPrimario(new java.awt.Color(0, 51, 153));
        btnBuscarcliente.setColorPrimarioHover(new java.awt.Color(51, 0, 255));
        btnBuscarcliente.setColorSecundario(new java.awt.Color(51, 153, 255));
        btnBuscarcliente.setColorSecundarioHover(new java.awt.Color(153, 204, 255));
        btnBuscarcliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarclienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 848, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(txtBuscar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(12, 12, 12)
                        .addComponent(btnBuscarcliente, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnInsertarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addContainerGap(277, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(txtBuscar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBuscarcliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnInsertarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)))
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout tablaClientesLayout = new javax.swing.GroupLayout(tablaClientes.getContentPane());
        tablaClientes.getContentPane().setLayout(tablaClientesLayout);
        tablaClientesLayout.setHorizontalGroup(
            tablaClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 870, Short.MAX_VALUE)
            .addGroup(tablaClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tablaClientesLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        tablaClientesLayout.setVerticalGroup(
            tablaClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 630, Short.MAX_VALUE)
            .addGroup(tablaClientesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tablaClientesLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        jLabel5.setFont(new java.awt.Font("Roboto Black", 0, 22)); // NOI18N
        jLabel5.setText("Listado Servicios");

        jScrollPane3.setBackground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jScrollPane3.setForeground(new java.awt.Color(255, 255, 255));
        jScrollPane3.setToolTipText("");
        jScrollPane3.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        tblServicios.setFont(new java.awt.Font("Roboto Medium", 0, 14)); // NOI18N
        tblServicios.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Cedula", "Nombre ", "Apellido", "Direccion", "Telefono"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tblServicios);

        txtBuscarServicio.setFont(new java.awt.Font("Roboto Bold", 2, 14)); // NOI18N
        txtBuscarServicio.setPlaceholder("ejm. Ser-01");

        jLabel6.setFont(new java.awt.Font("Roboto Black", 0, 18)); // NOI18N
        jLabel6.setText("Buscar");

        btnBuscarServicio.setText("Buscar");
        btnBuscarServicio.setColorPrimario(new java.awt.Color(0, 51, 153));
        btnBuscarServicio.setColorPrimarioHover(new java.awt.Color(51, 0, 255));
        btnBuscarServicio.setColorSecundario(new java.awt.Color(51, 153, 255));
        btnBuscarServicio.setColorSecundarioHover(new java.awt.Color(153, 204, 255));
        btnBuscarServicio.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarServicioActionPerformed(evt);
            }
        });

        btnInsetarServicios.setText("Insertar");
        btnInsetarServicios.setColorPrimario(new java.awt.Color(0, 153, 51));
        btnInsetarServicios.setColorPrimarioHover(new java.awt.Color(0, 204, 102));
        btnInsetarServicios.setColorSecundario(new java.awt.Color(0, 255, 51));
        btnInsetarServicios.setColorSecundarioHover(new java.awt.Color(153, 204, 255));
        btnInsetarServicios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInsetarServiciosActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addGroup(jPanel8Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addGap(39, 39, 39)
                                .addComponent(txtBuscarServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnBuscarServicio, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnInsetarServicios, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 260, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addComponent(jLabel5)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtBuscarServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnBuscarServicio, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnInsetarServicios, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(jLabel6)))
                .addGap(44, 44, 44)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 446, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout TablaServiciosLayout = new javax.swing.GroupLayout(TablaServicios.getContentPane());
        TablaServicios.getContentPane().setLayout(TablaServiciosLayout);
        TablaServiciosLayout.setHorizontalGroup(
            TablaServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 863, Short.MAX_VALUE)
            .addGroup(TablaServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(TablaServiciosLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        TablaServiciosLayout.setVerticalGroup(
            TablaServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 622, Short.MAX_VALUE)
            .addGroup(TablaServiciosLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(TablaServiciosLayout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        setBackground(new java.awt.Color(0, 53, 79));
        setLayout(new java.awt.BorderLayout());

        jPanel1.setBackground(new java.awt.Color(0, 53, 79));
        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(0, 53, 79));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(0, 53, 79));

        lblTituloFac.setBackground(new java.awt.Color(0, 53, 79));
        lblTituloFac.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        lblTituloFac.setForeground(new java.awt.Color(255, 255, 255));
        lblTituloFac.setText("FACTURACION MECANICA YINGS AND YAN");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/Logomini1.png"))); // NOI18N

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTituloFac, javax.swing.GroupLayout.PREFERRED_SIZE, 542, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lblTituloFac, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel3.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 930, 70));

        lblDireccion.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        lblDireccion.setText("Direccion:");
        jPanel3.add(lblDireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 160, -1, -1));

        lblTelefono.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        lblTelefono.setText("Telefono:");
        jPanel3.add(lblTelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(440, 200, -1, -1));

        lblDatosCli.setText("Datos del Cliente");
        jPanel3.add(lblDatosCli, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 130, -1, 20));
        jPanel3.add(txttelefono, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 200, 220, -1));

        lblFecha.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        lblFecha.setText("Fecha:");
        jPanel3.add(lblFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 90, -1, -1));
        jPanel3.add(txtdireccion, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 160, 220, -1));

        btnEliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/boton-x (1).png"))); // NOI18N
        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });
        jPanel3.add(btnEliminar, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 270, -1, -1));

        btnAñadircliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/mas (1).png"))); // NOI18N
        btnAñadircliente.setText("Buscar");
        btnAñadircliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirclienteActionPerformed(evt);
            }
        });
        jPanel3.add(btnAñadircliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 160, -1, 30));

        JtableFactura.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Codigo Producto/Servicio", "Nombre Producto/Servicio", "Precio Producto/Servicio", "Cantidad Producto/Servicio", "Subtotal"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(JtableFactura);

        jPanel3.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 330, 710, 90));

        lblSubtotal.setText("SubTotal:");
        jPanel3.add(lblSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 450, -1, 20));

        lblDescuento.setText("%Descuento:");
        jPanel3.add(lblDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 470, -1, -1));

        lblIva.setText("IVA 15%:");
        jPanel3.add(lblIva, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 490, -1, -1));

        lblTotalFAc.setText("Total Factura:");
        jPanel3.add(lblTotalFAc, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 510, -1, -1));

        btnNuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/registro (1)_1.png"))); // NOI18N
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });
        jPanel3.add(btnNuevo, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 120, 80, 70));

        btnVentasGeneradas.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/dinero.png"))); // NOI18N
        btnVentasGeneradas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnVentasGeneradasActionPerformed(evt);
            }
        });
        jPanel3.add(btnVentasGeneradas, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 210, 80, 70));

        btnImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/impresion.png"))); // NOI18N
        btnImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImprimirActionPerformed(evt);
            }
        });
        jPanel3.add(btnImprimir, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 300, 80, 70));

        btnCancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/rechazar.png"))); // NOI18N
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });
        jPanel3.add(btnCancelar, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 390, 80, 70));

        btnSalir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/cerrar-sesion.png"))); // NOI18N
        btnSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSalirActionPerformed(evt);
            }
        });
        jPanel3.add(btnSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 480, 80, 70));

        lbllineas.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.add(lbllineas, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 430, 710, 110));

        lblcedula.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        lblcedula.setText("Cedula:");
        jPanel3.add(lblcedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 160, -1, -1));
        jPanel3.add(txtcedula, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 160, 190, 30));

        lblNombre1.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        lblNombre1.setText("Cliente:");
        jPanel3.add(lblNombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 200, -1, -1));
        jPanel3.add(txtNombre1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 200, 190, -1));

        txtcodigoFac.setToolTipText("AUTOGENERADO");
        jPanel3.add(txtcodigoFac, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 90, 130, -1));

        lblCuadro1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.add(lblCuadro1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 130, 710, 110));

        lblcodFac1.setFont(new java.awt.Font("Yu Gothic UI Light", 1, 14)); // NOI18N
        lblcodFac1.setText("N° Factura:");
        jPanel3.add(lblcodFac1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 90, 70, -1));
        jPanel3.add(txtSubtotal, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 450, 100, -1));

        btnFinalizarFac.setBackground(new java.awt.Color(0, 204, 0));
        btnFinalizarFac.setText("Finalizar Factura");
        btnFinalizarFac.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnFinalizarFacActionPerformed(evt);
            }
        });
        jPanel3.add(btnFinalizarFac, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 550, -1, -1));

        btnAñadirProductos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/mas (1).png"))); // NOI18N
        btnAñadirProductos.setText("Añadir Productos");
        btnAñadirProductos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirProductosActionPerformed(evt);
            }
        });
        jPanel3.add(btnAñadirProductos, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 270, -1, -1));
        jPanel3.add(txtfecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 90, 220, -1));

        lblCuadro.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.add(lblCuadro, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 710, 40));

        btnAñadirServicos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Iconos/mas (1).png"))); // NOI18N
        btnAñadirServicos.setText("Añadir Servicios ");
        btnAñadirServicos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAñadirServicosActionPerformed(evt);
            }
        });
        jPanel3.add(btnAñadirServicos, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 270, -1, -1));
        jPanel3.add(txtDescuento, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 470, 100, -1));
        jPanel3.add(txtTotalfac, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 510, 100, 20));

        lblverlis.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel3.add(lblverlis, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 250, 710, 70));
        jPanel3.add(txtiva, new org.netbeans.lib.awtextra.AbsoluteConstraints(620, 490, 100, -1));

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(43, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 890, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 601, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(41, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 0, 950, 660));

        add(jPanel1, java.awt.BorderLayout.LINE_END);
    }// </editor-fold>//GEN-END:initComponents

    private void btnInsertarProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarProductosActionPerformed
        seteardatosPro();
        actualizarSubtotalesFila();
    }//GEN-LAST:event_btnInsertarProductosActionPerformed

    private void btnAñadirProductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirProductosActionPerformed
        if (txtcedula.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "AGREGUE LOS DATOS DEL CLIENTE");
        } else {
            activarJdialog(tablaproductos);
        }
    }//GEN-LAST:event_btnAñadirProductosActionPerformed

    private void btnInsertarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsertarClienteActionPerformed
        tablaClientes.dispose();
        CrudPanelCliente registrocli = new CrudPanelCliente();
        MostarpanelCruds(registrocli);
    }//GEN-LAST:event_btnInsertarClienteActionPerformed

    private void btnAñadirclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirclienteActionPerformed
        activarJadialog(tablaClientes);
    }//GEN-LAST:event_btnAñadirclienteActionPerformed

    private void btnAñadirServicosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAñadirServicosActionPerformed
        if (txtcedula.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "AGREGUE LOS DATOS DEL CLIENTE");
        } else {
            activarJadialogser(TablaServicios);
        }

    }//GEN-LAST:event_btnAñadirServicosActionPerformed

    private void btnFinalizarFacActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnFinalizarFacActionPerformed
        actualizarFactura();
        guardarFactura();


    }//GEN-LAST:event_btnFinalizarFacActionPerformed

    private void btnbuscarproductosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnbuscarproductosActionPerformed

        String textoBusqueda = txtBuscarProducto.getText();
        filtrarTabla(textoBusqueda);

    }//GEN-LAST:event_btnbuscarproductosActionPerformed

    private void btnInsetarServiciosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInsetarServiciosActionPerformed
        seteardatosSer();
        actualizarSubtotalesFila();
    }//GEN-LAST:event_btnInsetarServiciosActionPerformed

    private void btnBuscarclienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarclienteActionPerformed
        CargarCliente();


    }//GEN-LAST:event_btnBuscarclienteActionPerformed

    private void btnBuscarServicioActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarServicioActionPerformed
        String textoBusqueda = txtBuscarServicio.getText();
        filtrarTablaServicios(textoBusqueda);
    }//GEN-LAST:event_btnBuscarServicioActionPerformed

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        Factura nuevo = new Factura();
        MostarpanelCruds(nuevo);
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void btnVentasGeneradasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnVentasGeneradasActionPerformed
        JOptionPane.showMessageDialog(this, "SERVICIO DE INVENTARIO AUN NO DISPONIBLE");
    }//GEN-LAST:event_btnVentasGeneradasActionPerformed

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        VistaMenu cancelar = new VistaMenu();
        cancelar.setEnabled(true);

    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSalirActionPerformed
        VistaMenu Salir = new VistaMenu();
        Salir.setEnabled(true);
    }//GEN-LAST:event_btnSalirActionPerformed

    private void btnInsertarProductosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnInsertarProductosMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnInsertarProductosMouseClicked

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        eliminarFilaSeleccionada();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImprimirActionPerformed
        // Validar que la tabla de detalles no esté vacía
    if (JtableFactura.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "No se puede generar un PDF de una factura vacía.");
        return;
    }
    
    // Obtener la cédula del cliente seleccionado
    generarReciboPDF();
    String cedula = txtcedula.getText().trim();
    if (!cedula.isEmpty()) {
        String correoCliente = obtenerCorreoCliente(cedula);
        if (correoCliente != null) {
            transfer_to_email(correoCliente, pdfPath);
        } else {
            JOptionPane.showMessageDialog(this, "No se pudo obtener el correo del cliente.");
        }
    } else {
        JOptionPane.showMessageDialog(this, "Por favor, seleccione un cliente.");
    }

    }//GEN-LAST:event_btnImprimirActionPerformed

    public String obtenerCorreoCliente(String cedula) {
        ObjectContainer baseBD = Conexion_db.ConectarBD();
        String correoCliente = null;

        try {
            // Crear consulta para buscar cliente por cédula
            Query clienteQuery = baseBD.query();
            clienteQuery.constrain(Cliente.class);
            clienteQuery.descend("cedula").constrain(cedula);
            ObjectSet<Cliente> resultado = clienteQuery.execute();

            // Si se encuentra el cliente, obtener el correo
            if (!resultado.isEmpty()) {
                Cliente cliente = resultado.next();
                correoCliente = cliente.getCorreo();
            } else {
                JOptionPane.showMessageDialog(this, "Cliente no encontrado.");
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Error al buscar el cliente: " + e.getMessage());
        } finally {
            if (baseBD != null) {
                baseBD.close();
            }
        }

        return correoCliente;
    }

    private void eliminarFilaSeleccionada() {
        DefaultTableModel model = (DefaultTableModel) JtableFactura.getModel();
        int selectedRow = JtableFactura.getSelectedRow();
        if (selectedRow != -1) {
            model.removeRow(selectedRow);
            actualizarFactura();
        } else {
            JOptionPane.showMessageDialog(this, "Seleccione una fila para eliminar.");
        }
    }

    private static String obtenerProximoCodigoFactura(ObjectContainer db) {
        // Consultar todos los encabezados de factura
        ObjectSet<EncabezadoFactura_1> result = db.queryByExample(EncabezadoFactura_1.class);

        // Determinar el máximo ID numérico existente
        int maxID = 0;
        while (result.hasNext()) {
            EncabezadoFactura_1 facturacion = result.next();
            String codigo = facturacion.getCodigo_encabezadoFactura();
            if (codigo != null && codigo.startsWith("FAC-")) {
                try {
                    int id = Integer.parseInt(codigo.substring(4)); // Extraer la parte numérica del código
                    if (id > maxID) {
                        maxID = id;
                    }
                } catch (NumberFormatException e) {
                    // Manejar el caso en que el substring no sea un número válido
                    System.err.println("Error al parsear el código de factura: " + codigo);
                }
            }
        }

        // El próximo ID es el máximo + 1
        int siguienteID = maxID + 1;
        // Retornar el nuevo código concatenado con "FAC-"
        return String.format("FAC-%04d", siguienteID); // Asegura 4 dígitos con ceros a la izquierda
    }

    public void setearcabe() {
        ObjectContainer baseBD = Conexion_db.ConectarBD();
        String fac = obtenerProximoCodigoFactura(baseBD);
        txtcodigoFac.setText(fac);
        txtcodigoFac.setEnabled(false);
        txtfecha.setText(obtenerFechaActual());
        txtfecha.setEnabled(false);
        baseBD.close();
    }

    public static String obtenerFechaActual() {
        LocalDate fechaActual = LocalDate.now();
        String fechita = fechaActual.toString();
        return fechita;
    }

    private void activarJdialog(JDialog tablaProductos) {

        tablaProductos.setTitle("Listado Productos");
        tablaProductos.setSize(680, 330);
        tablaProductos.setLocationRelativeTo(this);
        tablaProductos.setVisible(true);
    }

    private void mostrarTablaProductos() {
    ObjectContainer BaseBD = Conexion_db.ConectarBD();
    Producto producto = new Producto(null, null, null, null, 0, 0, 0, null, null, null, null);
    ObjectSet<Producto> resul = BaseBD.get(producto);

    // Filtrar productos con stock mayor que cero
    List<Producto> productosFiltrados = new ArrayList<>();
    for (Producto prod : resul) {
        if (prod.getNumeroProductos_Producto() > 0) {
            productosFiltrados.add(prod);
        }
    }

    String matriz[][] = new String[productosFiltrados.size()][4];
    for (int i = 0; i < productosFiltrados.size(); i++) {
        Producto prod = productosFiltrados.get(i);
        matriz[i][0] = prod.getCodigo_Producto();
        matriz[i][1] = prod.getNombre_Producto();
        matriz[i][2] = String.format("%.2f", prod.getPrecio_Producto());
        matriz[i][3] = String.valueOf(prod.getNumeroProductos_Producto());
    }

    Tablproductos1.setModel(new javax.swing.table.DefaultTableModel(
        matriz,
        new String[]{
            "Código Producto", "Nombre Producto", "Precio", "Número de Productos"
        }
    ));
    BaseBD.close();
}

    private void filtrarTabla(String consulta) {
        DefaultTableModel modelo = (DefaultTableModel) Tablproductos1.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
        Tablproductos1.setRowSorter(sorter);

        if (consulta.trim().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + consulta));
        }

        // Selecciona automáticamente la primera fila filtrada
        if (Tablproductos1.getRowCount() > 0) {
            Tablproductos1.setRowSelectionInterval(0, 0);
        }
    }

//clientes
    private void activarJadialog(JDialog tablaClientes) {

        tablaClientes.setTitle("Listado Clientes");
        tablaClientes.setSize(680, 330);
        tablaClientes.setLocationRelativeTo(this);
        tablaClientes.setVisible(true);
    }

    private void mostrarDatosCliente() {

        ObjectContainer BaseBD = Conexion_db.ConectarBD();
        tblClientes.setEnabled(true);

        ObjectSet<Cliente> resultado = BaseBD.get(Cliente.class);

        String matriz[][] = new String[resultado.size()][5];
        int i = 0;
        for (Cliente cli : resultado) {

            matriz[i][0] = cli.getCedula();
            matriz[i][1] = cli.getNombres();
            matriz[i][2] = cli.getApellidos();

            i++;
        }

        tblClientes.setModel(new javax.swing.table.DefaultTableModel(
                matriz,
                new String[]{"Cedula", "Nombres", "Apellidos"}));
        BaseBD.close();
    }

    public final void CargarCliente() {
    Boolean encontrado = false;

    // Verifica que el campo de búsqueda no esté vacío
    String cedulaBuscar = txtBuscar1.getText().trim();
    if (cedulaBuscar.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, ingrese una cédula para buscar.");
        return;
    }

    // ESTABLECER CONEXION CON LA BASE DE DATOS
    ObjectContainer BaseBD = null;
    try {
        BaseBD = Conexion_db.ConectarBD();
        Query clienteQuery = BaseBD.query(); // Método para iniciar una consulta
        clienteQuery.constrain(Cliente.class); // Buscaremos en la clase Cliente
        clienteQuery.descend("cedula").constrain(cedulaBuscar); // Verificamos las coincidencias en el atributo especificado
        ObjectSet<Cliente> resultado = clienteQuery.execute(); // Ejecutamos la consulta y almacenamos en "resultado"

        // si hay resultados
        if (!resultado.isEmpty()) {
            for (Cliente cliente : resultado) {
                // Seteamos en los campos recibiendo del objeto
                txtcedula.setText(cliente.getCedula());
                txtcedula.setEnabled(false); // Para que el usuario no edite la cédula
                txtNombre1.setText(cliente.getNombres() + " " + cliente.getApellidos()); // Concatenar nombres y apellidos
                txtdireccion.setText(cliente.getDireccion());
                txttelefono.setText(cliente.getCelular());
                tablaClientes.dispose();
                encontrado = true;
                JOptionPane.showMessageDialog(this, "Cliente encontrado");
                break; // Salimos del bucle una vez encontrado el cliente
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró Cliente");
        }
    } catch (Exception e) {
        JOptionPane.showMessageDialog(this, "Error al buscar el cliente: " + e.getMessage());
    } finally {
        if (BaseBD != null) {
            BaseBD.close();
        }
    }
}

    public void seteardatosPro() {
        int filaSeleccionada = Tablproductos1.getSelectedRow();
        if (filaSeleccionada != -1) {
            int filaModelo = Tablproductos1.convertRowIndexToModel(filaSeleccionada);
            String codigoProducto = (String) Tablproductos1.getModel().getValueAt(filaModelo, 0);
            String nombreProducto = (String) Tablproductos1.getModel().getValueAt(filaModelo, 1);
            String precioProductoStr = (String) Tablproductos1.getModel().getValueAt(filaModelo, 2); // Precio como String
            String cantidadDisponibleStr = (String) Tablproductos1.getModel().getValueAt(filaModelo, 3); // Cantidad disponible como String

            double precioProducto;
            int cantidadDisponible;

            try {
                precioProducto = Double.parseDouble(precioProductoStr.replace(",", "."));
                cantidadDisponible = Integer.parseInt(cantidadDisponibleStr);
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Error al convertir precio o cantidad: " + e.getMessage());
                return;
            }

            Producto productoSeleccionado = obtenerProductoPorCodigo(codigoProducto); // Obtener el producto por su código

            if (productoSeleccionado == null) {
                JOptionPane.showMessageDialog(null, "Producto no encontrado.");
                return;
            }

            String numeroProductos = "";
            boolean esValido = false;

            while (!esValido) {
                numeroProductos = JOptionPane.showInputDialog("Ingrese la cantidad de productos");
                if (numeroProductos != null && numeroProductos.matches("\\d+")) {
                    int cantidadSolicitada = Integer.parseInt(numeroProductos);
                    int nuevaCantidad = productoSeleccionado.restarCantidad(cantidadSolicitada);
                    if (nuevaCantidad != -1) {
                        esValido = true;
                        // Actualizar la cantidad en el modelo de la tabla
                        Tablproductos1.getModel().setValueAt(String.valueOf(nuevaCantidad), filaModelo, 3);

                        // Calcular el subtotal y agregarlo a la tabla de facturas
                        double subtotal = precioProducto * cantidadSolicitada;

                        DefaultTableModel modeloFactura = (DefaultTableModel) JtableFactura.getModel();
                        modeloFactura.addRow(new Object[]{codigoProducto, nombreProducto, String.format("%.2f", precioProducto), cantidadSolicitada, String.format("%.2f", subtotal)});

                        // Buscar el objeto existente en la base de datos
                        ObjectContainer baseBD = Conexion_db.ConectarBD();
                        Producto productoBuscar = new Producto(codigoProducto, null, null, null, 0, 0, 0, null, null, null, Producto.Estado.ACTIVO);
                        ObjectSet resultado = baseBD.get(productoBuscar);
                        int coincidencias = resultado.size();

                        if (coincidencias > 0) {
                            // Eliminar el objeto existente
                            Producto productoAEliminar = (Producto) resultado.next();
                            baseBD.delete(productoAEliminar);

                            // Guardar el nuevo objeto con los datos modificados
                            baseBD.store(productoSeleccionado);
                            System.out.println("Producto modificado y guardado exitosamente.");
                        } else {
                            System.out.println("No se encontró ningún producto con el código especificado.");
                        }

                        // Cerrar la base de datos
                        baseBD.close();

                        tablaproductos.dispose();
                        // Actualizar los campos de la factura
                        actualizarFactura();
                    } else {
                        JOptionPane.showMessageDialog(null, "No hay suficiente cantidad disponible");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor ingrese solo dígitos");
                }
            }

            // Limpia la selección de la tabla
            Tablproductos1.clearSelection();

            tablaproductos.setVisible(true);

        } else {
            JOptionPane.showMessageDialog(null, "No se seleccionó ningún producto");
        }
    }

    //Servicios 
    private void mostrarTablaServicios() {
        ObjectContainer BaseBD = Conexion_db.ConectarBD();
        Servicios servicio = new Servicios();
        ObjectSet<Servicios> resul = BaseBD.get(servicio);

        String[][] matriz = new String[resul.size()][8];

        int i = 0;
        while (resul.hasNext()) {
            Servicios serv = resul.next();

            matriz[i][0] = serv.getCodigo_Servicio();
            matriz[i][1] = serv.getNombre_Servicio();
            matriz[i][2] = String.valueOf(serv.getPrecioTotal_Servicio());

            i++;
        }

        tblServicios.setModel(new javax.swing.table.DefaultTableModel(
                matriz,
                new String[]{
                    "Código Servicio", "Nombre Servicio", "Precio Total"}));
        BaseBD.close();
    }

    private void activarJadialogser(JDialog TablaServicios) {

        TablaServicios.setTitle("Listado Servicios");
        TablaServicios.setSize(680, 330);
        TablaServicios.setLocationRelativeTo(this);
        TablaServicios.setVisible(true);
    }

    private void filtrarTablaServicios(String consulta) {
        DefaultTableModel modelo = (DefaultTableModel) tblServicios.getModel();
        TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(modelo);
        tblServicios.setRowSorter(sorter);

        if (consulta.trim().length() == 0) {
            sorter.setRowFilter(null);
        } else {
            sorter.setRowFilter(RowFilter.regexFilter("(?i)" + consulta));
        }

        // Selecciona automáticamente la primera fila filtrada
        if (tblServicios.getRowCount() > 0) {
            tblServicios.setRowSelectionInterval(0, 0);
        }
    }

    public void seteardatosSer() {
        int filaSeleccionada = tblServicios.getSelectedRow();
        if (filaSeleccionada != -1) {
            int filaModelo = tblServicios.convertRowIndexToModel(filaSeleccionada);
            String codigoServicio = (String) tblServicios.getModel().getValueAt(filaModelo, 0);
            String nombreServicio = (String) tblServicios.getModel().getValueAt(filaModelo, 1);
            String precioServicio = (String) tblServicios.getModel().getValueAt(filaModelo, 2);

            String numerodevehuculos = "";
            boolean esValido = false;

            while (!esValido) {
                numerodevehuculos = JOptionPane.showInputDialog("Ingrese el número de vehículos a los que se les realizó el servicio");
                if (numerodevehuculos != null && numerodevehuculos.matches("\\d+")) {
                    esValido = true;
                    TablaServicios.dispose();
                } else {
                    JOptionPane.showMessageDialog(null, "Por favor ingrese solo dígitos.");
                }
            }

            DefaultTableModel modeloFactura = (DefaultTableModel) JtableFactura.getModel();
            modeloFactura.addRow(new Object[]{codigoServicio, nombreServicio, precioServicio, numerodevehuculos});

            // Limpia la selección de la tabla
            tblServicios.clearSelection();
            tblServicios.setVisible(true);

            // Actualizar los campos de la factura
            actualizarFactura();

        } else {
            JOptionPane.showMessageDialog(null, "No se seleccionó ningún producto");
        }
    }

//  
    private void actualizarFactura() {
        actualizarSubtotalesFila(); // Primero actualizar los subtotales por fila
        double subtotal = calcularSubtotalTabla();
        double porcentajeDescuento = 0.0;
        if (!txtDescuento.getText().isEmpty()) {
            String descuentoStr = txtDescuento.getText().replace(",", ".");
            porcentajeDescuento = Double.parseDouble(descuentoStr);
        }
        double porcentajeIVA = 15.0; // IVA del 15%
        double descuento = calcularDescuento(subtotal, porcentajeDescuento);
        double iva = calcularIVA(subtotal, porcentajeIVA);
        double total = calcularTotal(subtotal, descuento, iva);

        txtSubtotal.setText(String.format("%.2f", subtotal));
        txtDescuento.setText(String.format("%.2f", descuento));
        txtiva.setText(String.format("%.2f", iva));
        txtTotalfac.setText(String.format("%.2f", total));
    }

// Método para calcular el descuento
    private double calcularDescuento(double subtotal, double porcentajeDescuento) {
        return subtotal * (porcentajeDescuento / 100.0);
    }

// Método para calcular el IVA
    private double calcularIVA(double subtotal, double porcentajeIVA) {
        return subtotal * (porcentajeIVA / 100.0);
    }

// Método para calcular el total
    private double calcularTotal(double subtotal, double descuento, double iva) {
        return subtotal - descuento + iva;
    }

    private void actualizarSubtotalesFila() {
        DefaultTableModel model = (DefaultTableModel) JtableFactura.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String precioStr = model.getValueAt(i, 2).toString().replace(",", ".");
            String cantidadStr = model.getValueAt(i, 3).toString().replace(",", ".");
            double precio = Double.parseDouble(precioStr);
            int cantidad = Integer.parseInt(cantidadStr);
            double subtotal = precio * cantidad;
            model.setValueAt(String.format("%.2f", subtotal), i, 4);
        }
    }

    private double calcularSubtotalTabla() {
        double subtotal = 0.0;
        DefaultTableModel model = (DefaultTableModel) JtableFactura.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String subtotalStr = ((String) model.getValueAt(i, 4)).replace(",", ".");
            subtotal += Double.parseDouble(subtotalStr);
        }
        return subtotal;
    }

    private void MostarpanelCruds(JPanel p) {
        p.setSize(890, 630);
        p.setLocation(0, 0);
        PanelPrincipal.removeAll();
        PanelPrincipal.add(p, BorderLayout.CENTER);
        PanelPrincipal.revalidate();
        PanelPrincipal.repaint();
    }

public void cargarDatosFactura(String codigoFactura) {
    ObjectContainer baseBD = Conexion_db.ConectarBD();

    try {
        // Consultar el encabezado de la factura
        EncabezadoFactura_1 facturaBuscar = new EncabezadoFactura_1();
        facturaBuscar.setCodigo_encabezadoFactura(codigoFactura);
        ObjectSet<EncabezadoFactura_1> resultadoFactura = baseBD.get(facturaBuscar);

        if (!resultadoFactura.isEmpty()) {
            EncabezadoFactura_1 miFactura = resultadoFactura.next();

            // Cargar los datos del encabezado de la factura
            txtcodigoFac.setText(miFactura.getCodigo_encabezadoFactura());
            txtfecha.setText(miFactura.getFecha_encabezadoFactura());
            txtcedula.setText(miFactura.getCedulaCliente_encabezadoFactura());

            // Consultar los datos del cliente
            Cliente clienteBuscar = new Cliente();
            clienteBuscar.setCedula(miFactura.getCedulaCliente_encabezadoFactura());
            ObjectSet<Cliente> resultadoCliente = baseBD.get(clienteBuscar);

            if (!resultadoCliente.isEmpty()) {
                Cliente cliente = resultadoCliente.next();
                // Concatenar el nombre y el apellido en el mismo campo
                txtNombre1.setText(cliente.getNombres() + " " + cliente.getApellidos());
                txtdireccion.setText(cliente.getDireccion());
                txttelefono.setText(cliente.getCelular());
            }

            // Consultar los detalles de la factura
            DetalleFactura_1 detalleBuscar = new DetalleFactura_1();
            detalleBuscar.setCodigo_encabezadoFactura(codigoFactura);
            ObjectSet<DetalleFactura_1> resultadoDetalle = baseBD.get(detalleBuscar);

            DefaultTableModel modeloFactura = (DefaultTableModel) JtableFactura.getModel();
            modeloFactura.setRowCount(0); // Limpiar la tabla

            for (DetalleFactura_1 miDetalle : resultadoDetalle) {
                String codigo = miDetalle.getCodigoProducto_detalleFactura();
                String nombre = "";
                double precio = 0.0;
                int cantidad = miDetalle.getCantidadProdcutos_detalleFactura();

                if (codigo != null) {
                    if (!obtenerNombreProducto(codigo, baseBD).isEmpty()) {
                        nombre = obtenerNombreProducto(codigo, baseBD);
                        precio = obtenerPrecioProducto(codigo, baseBD);
                    } else if (!obtenerNombreServicio(codigo, baseBD).isEmpty()) {
                        nombre = obtenerNombreServicio(codigo, baseBD);
                        precio = obtenerPrecioServicio(codigo, baseBD);
                    }

                    modeloFactura.addRow(new Object[]{codigo, nombre, String.valueOf(precio), String.valueOf(cantidad)});
                }
            }

            // Actualizar los campos de subtotales, descuentos, etc.
            actualizarFactura();

            // Deshabilitar botones
            btnAñadirProductos.setEnabled(false);
            btnAñadirServicos.setEnabled(false);
            btnEliminar.setEnabled(false);
            btnFinalizarFac.setEnabled(false);
            btnBuscarcliente.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(this, "Factura no encontrada.");
        }
    } finally {
        baseBD.close();
    }
}

    private String obtenerNombreProducto(String codigo, ObjectContainer baseBD) {
        Producto productoBuscar = new Producto();
        productoBuscar.setCodigo_Producto(codigo);
        ObjectSet<Producto> resultadoProducto = baseBD.get(productoBuscar);
        if (!resultadoProducto.isEmpty()) {
            return resultadoProducto.next().getNombre_Producto();
        }
        return "";
    }

    private double obtenerPrecioProducto(String codigo, ObjectContainer baseBD) {
        Producto productoBuscar = new Producto();
        productoBuscar.setCodigo_Producto(codigo);
        ObjectSet<Producto> resultadoProducto = baseBD.get(productoBuscar);
        if (!resultadoProducto.isEmpty()) {
            return resultadoProducto.next().getPrecio_Producto();
        }
        return 0.0;
    }

    private String obtenerNombreServicio(String codigoServicio, ObjectContainer baseBD) {
        Servicios servicioBuscar = new Servicios();
        servicioBuscar.setCodigo_Servicio(codigoServicio);
        ObjectSet<Servicios> resultadoServicio = baseBD.get(servicioBuscar);

        if (!resultadoServicio.isEmpty()) {
            return resultadoServicio.next().getNombre_Servicio();
        }
        return "";
    }

    private double obtenerPrecioServicio(String codigoServicio, ObjectContainer baseBD) {
        Servicios servicioBuscar = new Servicios();
        servicioBuscar.setCodigo_Servicio(codigoServicio);
        ObjectSet<Servicios> resultadoServicio = baseBD.get(servicioBuscar);

        if (!resultadoServicio.isEmpty()) {
            return resultadoServicio.next().getPrecioTotal_Servicio();
        }
        return 0.0;
    }

    private Producto obtenerProductoPorCodigo(String codigoProducto) {
        ObjectContainer baseBD = Conexion_db.ConectarBD();
        Producto productoBuscar = new Producto();
        productoBuscar.setCodigo_Producto(codigoProducto);
        ObjectSet<Producto> resultadoProducto = baseBD.get(productoBuscar);

        Producto producto = null;
        if (!resultadoProducto.isEmpty()) {
            producto = resultadoProducto.next();
        }

        baseBD.close();
        return producto;
    }

    //para generar un pdf primer paso 
    public void generarReciboPDF() {
        try {
            PdfWriter writer = new PdfWriter(pdfPath);
            PdfDocument pdfDoc = new PdfDocument(writer);
            Document document = new Document(pdfDoc);

            // Añadir logotipo
            String logoPath = "src\\Images\\logote_resized.png";
            File logoFile = new File(logoPath);
            if (logoFile.exists()) {
                Image img = new Image(ImageDataFactory.create(logoPath));
                img.setWidth(100);
                img.setHeight(50);
                document.add(img);
            } else {
                JOptionPane.showMessageDialog(null, "Logotipo no encontrado en: " + logoPath);
            }

            // Añadir el título de la factura
            Paragraph title = new Paragraph("Factura de Venta")
                    .setTextAlignment(TextAlignment.CENTER)
                    .setFontSize(18)
                    .setBold();
            document.add(title);

            document.add(new Paragraph(" "));

            // Información del cliente
            document.add(new Paragraph("Cliente: " + txtNombre1.getText()));
            document.add(new Paragraph("Cédula: " + txtcedula.getText()));
            document.add(new Paragraph("Dirección: " + txtdireccion.getText()));
            document.add(new Paragraph("Teléfono: " + txttelefono.getText()));
            document.add(new Paragraph("Fecha: " + txtfecha.getText()));
            document.add(new Paragraph(" "));

            // Crear una tabla con columnas
            float[] columnWidths = {2, 4, 2, 2, 2};
            Table table = new Table(UnitValue.createPercentArray(columnWidths));
            table.setWidth(UnitValue.createPercentValue(100));

            table.addHeaderCell(new Cell().add(new Paragraph("Código").setBold().setBackgroundColor(ColorConstants.GRAY)));
            table.addHeaderCell(new Cell().add(new Paragraph("Descripción").setBold().setBackgroundColor(ColorConstants.GRAY)));
            table.addHeaderCell(new Cell().add(new Paragraph("Precio Unitario").setBold().setBackgroundColor(ColorConstants.GRAY)));
            table.addHeaderCell(new Cell().add(new Paragraph("Cantidad").setBold().setBackgroundColor(ColorConstants.GRAY)));
            table.addHeaderCell(new Cell().add(new Paragraph("Subtotal").setBold().setBackgroundColor(ColorConstants.GRAY)));

            // Agregar filas con datos de la factura
            DefaultTableModel model = (DefaultTableModel) JtableFactura.getModel();
            for (int i = 0; i < model.getRowCount(); i++) {
                table.addCell(new Cell().add(new Paragraph(model.getValueAt(i, 0).toString())));
                table.addCell(new Cell().add(new Paragraph(model.getValueAt(i, 1).toString())));
                table.addCell(new Cell().add(new Paragraph(model.getValueAt(i, 2).toString())));
                table.addCell(new Cell().add(new Paragraph(model.getValueAt(i, 3).toString())));
                table.addCell(new Cell().add(new Paragraph(model.getValueAt(i, 4).toString())));
            }

            // Añadir la tabla al documento
            document.add(table);

            // Añadir los totales al final del documento
            document.add(new Paragraph(" "));
            document.add(new Paragraph("Subtotal: " + txtSubtotal.getText()).setBold());
            document.add(new Paragraph("Descuento: " + txtDescuento.getText()).setBold());
            document.add(new Paragraph("IVA: " + txtiva.getText()).setBold());
            document.add(new Paragraph("Total: " + txtTotalfac.getText()).setBold());

            // Añadir pie de página con información de la empresa
            document.add(new Paragraph(" "));
            Paragraph footer = new Paragraph("Gracias por su compra\n MECANICA YINGS AND YANG\n Octavio Chacon \nTeléfono: 123-456-789")
                    .setTextAlignment(TextAlignment.CENTER)
                    .setFontSize(10);
            document.add(footer);

            // Cerrar el documento
            document.close();

            JOptionPane.showMessageDialog(null, "Factura PDF generada con éxito!");

            // Abrir el archivo PDF
            File pdfFile = new File(pdfPath);
            if (pdfFile.exists()) {
                if (Desktop.isDesktopSupported()) {
                    Desktop.getDesktop().open(pdfFile);
                } else {
                    JOptionPane.showMessageDialog(null, "La funcionalidad de abrir el archivo no está soportada en su sistema.");
                }
            } else {
                JOptionPane.showMessageDialog(null, "El archivo PDF no se encontró.");
            }
        } catch (FileNotFoundException e) {
            JOptionPane.showMessageDialog(null, "Error al generar el PDF: " + e.getMessage());
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error al abrir el PDF: " + e.getMessage());
        }
    }

    //para enviar al correo 
    public static void transfer_to_email(String correo, String pdfPath) {
        String correoEnvia = "yingsyyangmecanica@gmail.com";
        String contrasena = "ghsd axnw dxtk fxei";
        String mensaje = "Adjunto encontrará la factura generada.";
        String asunto = "Factura de Compra";
        Properties objetoPEC = new Properties();
        objetoPEC.put("mail.smtp.host", "smtp.gmail.com");
        objetoPEC.setProperty("mail.smtp.starttls.enable", "true");
        objetoPEC.setProperty("mail.smtp.port", "587");
        objetoPEC.setProperty("mail.smtp.user", correoEnvia);
        objetoPEC.setProperty("mail.smtp.auth", "true");
        Session sesion = Session.getDefaultInstance(objetoPEC);
        MimeMessage mail = new MimeMessage(sesion);
        try {
            mail.setFrom(new InternetAddress(correoEnvia));
            mail.addRecipient(Message.RecipientType.TO, new InternetAddress(correo));
            mail.setSubject(asunto);

            // Crear la parte del mensaje
            MimeBodyPart messageBodyPart = new MimeBodyPart();
            messageBodyPart.setText(mensaje);

            // Crear la parte del archivo adjunto
            MimeBodyPart attachPart = new MimeBodyPart();
            attachPart.attachFile(pdfPath);

            // Crear multipart para combinar el mensaje y el adjunto
            Multipart multipart = new MimeMultipart();
            multipart.addBodyPart(messageBodyPart);
            multipart.addBodyPart(attachPart);

            // Configurar el contenido del correo
            mail.setContent(multipart);

            // Enviar el correo
            Transport trasporte = sesion.getTransport("smtp");
            trasporte.connect(correoEnvia, contrasena);
            trasporte.sendMessage(mail, mail.getRecipients(Message.RecipientType.TO));
            trasporte.close();
            JOptionPane.showMessageDialog(null, "El correo se envió correctamente");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Error al enviar el correo: " + ex.getMessage());
        }
    }

        //hasta aqui lo del pdf y correo 
    
    private void guardarFactura() {
    DefaultTableModel model = (DefaultTableModel) JtableFactura.getModel();
    String codigoFactura = txtcodigoFac.getText();
    String fecha = txtfecha.getText();
    String cedula = txtcedula.getText();
    String totalText = txtTotalfac.getText().replace(",", ".");

    // Validar que los datos del cliente estén completos
    if (codigoFactura.isEmpty() || fecha.isEmpty() || cedula.isEmpty() || totalText.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Por favor, complete todos los datos del cliente.");
        return;
    }

    // Validar que la tabla de detalles no esté vacía
    if (model.getRowCount() == 0) {
        JOptionPane.showMessageDialog(this, "No se puede guardar una factura vacía.");
        return;
    }

    double total = Double.parseDouble(totalText);

    EncabezadoFactura_1 factura = new EncabezadoFactura_1(codigoFactura, fecha, cedula, total);
    // Guardar el encabezado y los detalles en la base de datos
    ObjectContainer baseBD = Conexion_db.ConectarBD();
    baseBD.store(factura);
    // Guardar los detalles de la factura
    for (int i = 0; i < model.getRowCount(); i++) {
        String codigo = model.getValueAt(i, 0).toString();
        String tipo = model.getValueAt(i, 4).toString();
        int cantidad = Integer.parseInt(model.getValueAt(i, 3).toString());
        DetalleFactura_1 detalle;
        if ("Producto".equals(tipo)) {
            detalle = new DetalleFactura_1(codigoFactura, codigo, cantidad);
            Producto producto = obtenerProductoPorCodigo(codigo);
            if (producto != null) {
                producto.restarCantidad(cantidad);
                baseBD.store(producto);
            }
        } else {
            detalle = new DetalleFactura_1(codigoFactura, codigo, cantidad);
        }
        baseBD.store(detalle);
    }

    baseBD.close();
    JOptionPane.showMessageDialog(this, "Factura guardada exitosamente!");

    // Reiniciar y generar una nueva factura
    resetearFormulario();
}

    private void resetearFormulario() {
        txtcedula.setText("");
        txtNombre1.setText("");
        txtdireccion.setText("");
        txttelefono.setText("");
        txtSubtotal.setText("");
        txtDescuento.setText("");
        txtiva.setText("");
        txtTotalfac.setText("");

        DefaultTableModel model = (DefaultTableModel) JtableFactura.getModel();
        model.setRowCount(0);

        setearcabe();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable JtableFactura;
    private javax.swing.JDialog TablaServicios;
    private javax.swing.JTable Tablproductos1;
    private javax.swing.JButton btnAñadirProductos;
    private javax.swing.JButton btnAñadirServicos;
    private javax.swing.JButton btnAñadircliente;
    private rsbuttongradiente.RSButtonGradiente btnBuscarServicio;
    private rsbuttongradiente.RSButtonGradiente btnBuscarcliente;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnEliminar;
    private rojeru_san.RSButton btnFinalizarFac;
    private javax.swing.JButton btnImprimir;
    private rsbuttongradiente.RSButtonGradiente btnInsertarCliente;
    private rsbuttongradiente.RSButtonGradiente btnInsertarProductos;
    private rsbuttongradiente.RSButtonGradiente btnInsetarServicios;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSalir;
    private javax.swing.JButton btnVentasGeneradas;
    private rsbuttongradiente.RSButtonGradiente btnbuscarproductos;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel lblCuadro;
    private javax.swing.JLabel lblCuadro1;
    private javax.swing.JLabel lblDatosCli;
    private javax.swing.JLabel lblDescuento;
    private javax.swing.JLabel lblDireccion;
    private javax.swing.JLabel lblFecha;
    private javax.swing.JLabel lblIva;
    private javax.swing.JLabel lblNombre1;
    private javax.swing.JLabel lblSubtotal;
    private javax.swing.JLabel lblTelefono;
    private javax.swing.JLabel lblTituloFac;
    private javax.swing.JLabel lblTotalFAc;
    private javax.swing.JLabel lblcedula;
    private javax.swing.JLabel lblcodFac1;
    private javax.swing.JLabel lbllineas;
    private javax.swing.JLabel lblverlis;
    private javax.swing.JDialog tablaClientes;
    private javax.swing.JDialog tablaproductos;
    private javax.swing.JTable tblClientes;
    private javax.swing.JScrollPane tblProductos;
    private javax.swing.JTable tblServicios;
    private rojeru_san.RSMTextFull txtBuscar1;
    private rojeru_san.RSMTextFull txtBuscarProducto;
    private rojeru_san.RSMTextFull txtBuscarServicio;
    private javax.swing.JTextField txtDescuento;
    private javax.swing.JTextField txtNombre1;
    private javax.swing.JTextField txtSubtotal;
    private javax.swing.JTextField txtTotalfac;
    private javax.swing.JTextField txtcedula;
    private javax.swing.JTextField txtcodigoFac;
    private javax.swing.JTextField txtdireccion;
    private javax.swing.JTextField txtfecha;
    private javax.swing.JTextField txtiva;
    private javax.swing.JTextField txttelefono;
    // End of variables declaration//GEN-END:variables
}
